list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR})

include(CMakeFindDependencyMacro)

# detect the OS
if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    set(FIND_SFML_OS_WINDOWS 1)
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    set(FIND_SFML_OS_LINUX 1)

    if(@SFML_USE_DRM@)
        set(FIND_SFML_USE_DRM 1)
    endif()
elseif(${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD")
    set(FIND_SFML_OS_FREEBSD 1)
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Android")
    set(FIND_SFML_OS_ANDROID 1)
elseif(${CMAKE_SYSTEM_NAME} MATCHES "iOS")
    set(FIND_SFML_OS_IOS 1)
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    set(FIND_SFML_OS_MACOS 1)
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Emscripten")
    set(FIND_SFML_OS_EMSCRIPTEN 1)
endif()

# start with an empty list
set(FIND_SFML_DEPENDENCIES_NOTFOUND)

if(FIND_SFML_USE_DRM)
    find_dependency(DRM)
    find_dependency(GBM)
elseif(FIND_SFML_OS_LINUX OR FIND_SFML_OS_FREEBSD)
    find_dependency(X11 REQUIRED COMPONENTS Xrandr Xcursor)
endif()

if(FIND_SFML_OS_LINUX)
    find_dependency(UDev)
endif()

if(NOT FIND_SFML_OS_ANDROID AND NOT FIND_SFML_OS_IOS AND NOT FIND_SFML_OS_EMSCRIPTEN)
    if(NOT OpenGL_GL_PREFERENCE)
        set(OpenGL_GL_PREFERENCE "LEGACY")
    endif()
    find_dependency(OpenGL COMPONENTS OpenGL)
endif()

if(FIND_SFML_OS_EMSCRIPTEN)
    find_path(EGL_INCLUDE_DIR EGL/egl.h)
    set(EGL_LIBRARY EGL)
    include(FindPackageHandleStandardArgs)
    find_package_handle_standard_args(EGL DEFAULT_MSG EGL_LIBRARY EGL_INCLUDE_DIR)
    add_library(EGL::EGL INTERFACE IMPORTED)
    target_link_libraries(EGL::EGL INTERFACE ${EGL_LIBRARY})

    find_path(GLES_INCLUDE_DIR GLES2/gl2.h)
    set(GLES_LIBRARY GL)
    include(FindPackageHandleStandardArgs)
    find_package_handle_standard_args(GLES DEFAULT_MSG GLES_LIBRARY GLES_INCLUDE_DIR)
    add_library(GLES::GLES INTERFACE IMPORTED)
    target_link_libraries(GLES::GLES INTERFACE ${GLES_LIBRARY})
endif()

if(FIND_SFML_DEPENDENCIES_NOTFOUND)
    set(FIND_SFML_ERROR "SFML found but some of its dependencies are missing (${FIND_SFML_DEPENDENCIES_NOTFOUND})")
    set(SFML_FOUND OFF)
endif()
